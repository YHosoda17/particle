<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ねこパンチ！</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            text-align: center;
            background-color: #ffe0b2; /* 優しいオレンジ系 */
            color: #4a2c2a; /* こげ茶 */
            margin: 0;
            padding: 20px;
            overflow: hidden; /* 猫の手が飛び出さないように */
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: #fff8e1; /* クリーム色 */
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }
        h1 {
            color: #e67e22; /* オレンジ */
            font-size: 2.8em;
            margin-bottom: 20px;
            position: relative;
        }
        h1::before {
            content: ''; /* 足跡の絵文字 */
            position: absolute;
            left: -30px;
            transform: rotate(-20deg);
        }
        h1::after {
            content: '';
            position: absolute;
            right: -30px;
            transform: rotate(20deg);
        }
        .game-info {
            display: flex;
            justify-content: space-around;
            margin-bottom: 25px;
            font-size: 1.4em;
            font-weight: bold;
            color: #d35400;
        }
        #gameArea {
            width: 700px;
            height: 400px;
            border: 3px dashed #d35400; /* オレンジ色の破線 */
            background-color: #fffaf0; /* アイボリー */
            margin: 20px auto;
            position: relative;
            overflow: hidden;
            border-radius: 10px;
            cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewport="0 0 100 100" style="fill:black;font-size:24px;"><text y="50%"></text></svg>') 15 15, auto; /* カーソルを指の絵文字に */
        }

        /* 猫の手のスタイル */
        .cat-paw {
            position: absolute;
            width: 80px;
            height: 80px;
            background-color: #f0a200; /* 猫の肉球っぽい色 */
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 40px;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            transition: transform 0.1s ease-out; /* クリック時のアニメーション */
            animation: appearPop 0.3s ease-out; /* 出現時のアニメーション */
            z-index: 10;
        }
        .cat-paw:hover {
            transform: scale(1.05); /* ホバーで少し大きく */
        }
        .cat-paw:active {
            transform: scale(0.9); /* クリックで少し小さく */
        }
        
        /* 猫の肉球 */
        .cat-paw::before {
            content: ''; 
            font-size: 50px;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-10deg);
        }

        /* 猫の手の出現アニメーション */
        @keyframes appearPop {
            0% { transform: scale(0); opacity: 0; }
            80% { transform: scale(1.1); opacity: 1; }
            100% { transform: scale(1); opacity: 1; }
        }

        #startButton {
            padding: 15px 30px;
            font-size: 1.8em;
            background-color: #28a745; /* 緑色 */
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            margin-top: 20px;
            transition: background-color 0.3s;
        }
        #startButton:hover {
            background-color: #218838;
        }
        #message {
            margin-top: 25px;
            font-size: 1.6em;
            color: #d35400;
            font-weight: bold;
            min-height: 40px;
        }

        /* ランキング */
        .ranking-section {
            margin-top: 40px;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            text-align: left;
        }
        .ranking-section h2 {
            text-align: center;
            color: #e67e22;
            margin-bottom: 20px;
        }
        #rankingList {
            list-style: none;
            padding: 0;
        }
        #rankingList li {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
            font-size: 1.1em;
        }
        #rankingList li:last-child {
            border-bottom: none;
        }
        #rankingList li .rank {
            font-weight: bold;
            color: #d35400;
            margin-right: 10px;
        }
        #rankingList li .name {
            flex-grow: 1;
        }
        #rankingList li .score {
            font-weight: bold;
            color: #34495e;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>ねこパンチ！</h1>

        <div class="game-info">
            <div>スコア: <span id="score">0</span></div>
            <div>残り時間: <span id="timeLeft">30</span>秒</div>
        </div>
        
        <div id="gameArea">
            </div>

        <button id="startButton">ゲームスタート！</button>

        <div id="message"></div>

        <div class="ranking-section">
            <h2>ランキング</h2>
            <ol id="rankingList">
                </ol>
        </div>
    </div>

    <script>
        // HTML要素の取得
        const gameArea = document.getElementById('gameArea');
        const scoreDisplay = document.getElementById('score');
        const timeLeftDisplay = document.getElementById('timeLeft');
        const startButton = document.getElementById('startButton');
        const messageDisplay = document.getElementById('message');
        const rankingList = document.getElementById('rankingList');

        // ゲーム変数
        let score = 0;
        let timeLeft = 30; // 制限時間（秒）
        let timerId; // setIntervalのID
        let catPawIntervalId; // 猫の手出現のsetIntervalのID
        let isGameRunning = false;

        // ランキングデータ (ブラウザのローカルストレージに保存)
        const MAX_RANKING_ITEMS = 5; // ランキング表示数

        // ----------------------------------------------------
        // 1. ゲームの初期化と開始
        // ----------------------------------------------------

        function initializeGame() {
            score = 0;
            timeLeft = 30;
            scoreDisplay.textContent = score;
            timeLeftDisplay.textContent = timeLeft;
            gameArea.innerHTML = ''; // ゲームエリアをクリア
            messageDisplay.textContent = '';
            startButton.disabled = false;
            startButton.textContent = 'ゲームスタート！';
        }

        function startGame() {
            if (isGameRunning) return;

            isGameRunning = true;
            startButton.disabled = true;
            messageDisplay.textContent = 'よーい、スタート！';

            // カウントダウンタイマー
            timerId = setInterval(() => {
                timeLeft--;
                timeLeftDisplay.textContent = timeLeft;

                if (timeLeft <= 0) {
                    endGame();
                }
            }, 1000); // 1秒ごとに実行

            // 猫の手の出現
            catPawIntervalId = setInterval(spawnCatPaw, 800); // 0.8秒ごとに猫の手を出す
        }

        // ----------------------------------------------------
        // 2. 猫の手の管理
        // ----------------------------------------------------

        function spawnCatPaw() {
            if (!isGameRunning) return;

            const catPaw = document.createElement('div');
            catPaw.classList.add('cat-paw');
            catPaw.addEventListener('click', clickCatPaw);

            // ランダムな位置を計算
            const maxX = gameArea.offsetWidth - catPaw.offsetWidth;
            const maxY = gameArea.offsetHeight - catPaw.offsetHeight;
            
            catPaw.style.left = `${Math.random() * maxX}px`;
            catPaw.style.top = `${Math.random() * maxY}px`;

            gameArea.appendChild(catPaw);

            // 一定時間後に猫の手を消す (クリックされなかった場合)
            setTimeout(() => {
                if (catPaw.parentNode === gameArea) { // まだゲームエリアに残っている場合のみ
                    catPaw.remove();
                }
            }, 1500); // 1.5秒後に消える
        }

        function clickCatPaw() {
            if (!isGameRunning) return;

            score++;
            scoreDisplay.textContent = score;
            this.remove(); // クリックされた猫の手を削除
        }

        // ----------------------------------------------------
        // 3. ゲーム終了
        // ----------------------------------------------------

        function endGame() {
            isGameRunning = false;
            clearInterval(timerId);
            clearInterval(catPawIntervalId);
            gameArea.innerHTML = ''; // 残っている猫の手を全て消す
            messageDisplay.textContent = `ゲーム終了！あなたのスコアは ${score} です！`;
            
            setTimeout(() => {
                promptForNameAndSaveScore(score);
            }, 1000); // メッセージ表示後に名前入力を促す
            
            startButton.disabled = false;
            startButton.textContent = 'もう一度プレイ！';
        }

        // ----------------------------------------------------
        // 4. ランキング管理
        // ----------------------------------------------------

        function getRanking() {
            // ローカルストレージからランキングを読み込む
            const ranking = JSON.parse(localStorage.getItem('catPunchRanking')) || [];
            return ranking.sort((a, b) => b.score - a.score); // スコアが高い順にソート
        }

        function saveRanking(name, score) {
            const ranking = getRanking();
            ranking.push({ name: name, score: score, date: new Date().toLocaleString() });
            
            // スコアが高い順にソートし、上位MAX_RANKING_ITEMS件のみ保持
            const sortedRanking = ranking.sort((a, b) => b.score - a.score).slice(0, MAX_RANKING_ITEMS);
            
            localStorage.setItem('catPunchRanking', JSON.stringify(sortedRanking));
            displayRanking(); // ランキングを更新して表示
        }

        function displayRanking() {
            const ranking = getRanking();
            rankingList.innerHTML = ''; // 一度リストをクリア

            if (ranking.length === 0) {
                rankingList.innerHTML = '<li>まだ誰もランキングに登録していません。</li>';
                return;
            }

            ranking.forEach((item, index) => {
                const li = document.createElement('li');
                li.innerHTML = `
                    <span class="rank">${index + 1}.</span>
                    <span class="name">${item.name}</span>
                    <span class="score">${item.score}点</span>
                    <span class="date">${item.date}</span>
                `;
                rankingList.appendChild(li);
            });
        }

        function promptForNameAndSaveScore(currentScore) {
            let playerName = prompt(`ランキングに登録！あなたの名前を入力してください (スコア: ${currentScore}点):`);
            if (playerName) {
                playerName = playerName.trim();
                if (playerName.length > 15) {
                    playerName = playerName.substring(0, 15) + '...'; // 長すぎる名前をトリム
                }
                if (playerName === '') {
                    playerName = '名無しさん';
                }
                saveRanking(playerName, currentScore);
                messageDisplay.textContent = `ランキングに登録しました！ ${playerName}さんのスコア: ${currentScore}点`;
            } else {
                messageDisplay.textContent = 'ランキング登録をスキップしました。';
            }
        }

        // ----------------------------------------------------
        // 5. イベントリスナーと初期表示
        // ----------------------------------------------------

        startButton.addEventListener('click', startGame);

        // ページロード時に実行
        initializeGame();
        displayRanking(); // 最初にランキングを表示
    </script>

</body>
</html>
